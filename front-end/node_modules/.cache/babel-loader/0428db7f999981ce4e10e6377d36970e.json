{"ast":null,"code":"import _classCallCheck from \"C:\\\\Sibela\\\\Own work\\\\agile-advantage\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Sibela\\\\Own work\\\\agile-advantage\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport alt from '../alt/Alt.js';\n\nvar DataActions =\n/*#__PURE__*/\nfunction () {\n  function DataActions() {\n    _classCallCheck(this, DataActions);\n\n    var appUrl = 'http://agileadvantage.consulting'; // Wordpress installation url\n\n    this.pagesEndPoint = \"\".concat(appUrl, \"/wp-json/wp/v2/pages\"); // Endpoint for getting Wordpress Pages\n\n    this.postsEndPoint = \"\".concat(appUrl, \"/wp-json/wp/v2/posts\"); // Endpoint for getting Wordpress Posts\n  } // Method for getting data from the provided end point url\n\n\n  _createClass(DataActions, [{\n    key: \"api\",\n    value: function api(endPoint) {\n      return new Promise(function (resolve, reject) {\n        axios.get(endPoint).then(function (response) {\n          resolve(response.data);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    } // Method for getting Pages data\n\n  }, {\n    key: \"getPages\",\n    value: function getPages(cb) {\n      var _this = this;\n\n      this.api(this.pagesEndPoint).then(function (response) {\n        _this.getPosts(response, cb);\n      });\n      return true;\n    } // Method for getting Posts data\n\n  }, {\n    key: \"getPosts\",\n    value: function getPosts(pages, cb) {\n      var _this2 = this;\n\n      this.api(this.postsEndPoint).then(function (response) {\n        var posts = response;\n        var payload = {\n          pages: pages,\n          posts: posts\n        };\n\n        _this2.getSuccess(payload); // Pass returned data to the store\n\n\n        cb(payload); // This callback will be used for dynamic rout building\n      });\n      return true;\n    } // This returnes an object with Pages and Posts data together\n    // The Alt Store will listen for this method to fire and will store the returned data\n\n  }, {\n    key: \"getSuccess\",\n    value: function getSuccess(payload) {\n      return payload;\n    }\n  }]);\n\n  return DataActions;\n}();\n\nexport default alt.createActions(DataActions);","map":{"version":3,"sources":["C:\\Sibela\\Own work\\agile-advantage\\front-end\\src\\app\\flux\\actions\\DataActions.js"],"names":["axios","alt","DataActions","appUrl","pagesEndPoint","postsEndPoint","endPoint","Promise","resolve","reject","get","then","response","data","catch","error","cb","api","getPosts","pages","posts","payload","getSuccess","createActions"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAkB,eAAlB;;IAEMC,W;;;AAEF,yBAAc;AAAA;;AACV,QAAMC,MAAM,GAAG,kCAAf,CADU,CACyC;;AAEnD,SAAKC,aAAL,aAAwBD,MAAxB,0BAHU,CAG4C;;AACtD,SAAKE,aAAL,aAAwBF,MAAxB,0BAJU,CAI4C;AACzD,G,CAED;;;;;wBACIG,Q,EAAU;AACV,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCT,QAAAA,KAAK,CAACU,GAAN,CAAUJ,QAAV,EAAoBK,IAApB,CAAyB,UAACC,QAAD,EAAc;AACnCJ,UAAAA,OAAO,CAACI,QAAQ,CAACC,IAAV,CAAP;AACH,SAFD,EAEGC,KAFH,CAES,UAACC,KAAD,EAAW;AAChBN,UAAAA,MAAM,CAACM,KAAD,CAAN;AACH,SAJD;AAKH,OANM,CAAP;AAOH,K,CAED;;;;6BACSC,E,EAAG;AAAA;;AACR,WAAKC,GAAL,CAAS,KAAKb,aAAd,EAA6BO,IAA7B,CAAkC,UAACC,QAAD,EAAY;AAC1C,QAAA,KAAI,CAACM,QAAL,CAAcN,QAAd,EAAwBI,EAAxB;AACH,OAFD;AAGA,aAAO,IAAP;AACH,K,CAED;;;;6BACSG,K,EAAOH,E,EAAG;AAAA;;AACf,WAAKC,GAAL,CAAS,KAAKZ,aAAd,EAA6BM,IAA7B,CAAkC,UAACC,QAAD,EAAY;AAC1C,YAAMQ,KAAK,GAAOR,QAAlB;AACA,YAAMS,OAAO,GAAK;AAAEF,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,KAAK,EAALA;AAAT,SAAlB;;AAEA,QAAA,MAAI,CAACE,UAAL,CAAgBD,OAAhB,EAJ0C,CAIhB;;;AAC1BL,QAAAA,EAAE,CAACK,OAAD,CAAF,CAL0C,CAK7B;AAChB,OAND;AAOA,aAAO,IAAP;AACH,K,CAED;AACA;;;;+BACWA,O,EAAQ;AACf,aAAOA,OAAP;AACH;;;;;;AAGL,eAAepB,GAAG,CAACsB,aAAJ,CAAkBrB,WAAlB,CAAf","sourcesContent":["\r\nimport axios from 'axios';\r\nimport alt   from '../alt/Alt.js';\r\n\r\nclass DataActions {\r\n\r\n    constructor() {\r\n        const appUrl = 'http://agileadvantage.consulting'; // Wordpress installation url\r\n\r\n        this.pagesEndPoint = `${appUrl}/wp-json/wp/v2/pages`; // Endpoint for getting Wordpress Pages\r\n        this.postsEndPoint = `${appUrl}/wp-json/wp/v2/posts`; // Endpoint for getting Wordpress Posts\r\n    }\r\n\r\n    // Method for getting data from the provided end point url\r\n    api(endPoint) {\r\n        return new Promise((resolve, reject) => {\r\n            axios.get(endPoint).then((response) => {\r\n                resolve(response.data);\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Method for getting Pages data\r\n    getPages(cb){\r\n        this.api(this.pagesEndPoint).then((response)=>{\r\n            this.getPosts(response, cb)\r\n        });\r\n        return true;\r\n    }\r\n\r\n    // Method for getting Posts data\r\n    getPosts(pages, cb){\r\n        this.api(this.postsEndPoint).then((response)=>{\r\n            const posts     = response\r\n            const payload   = { pages, posts };\r\n\r\n            this.getSuccess(payload); // Pass returned data to the store\r\n            cb(payload); // This callback will be used for dynamic rout building\r\n        });\r\n        return true;\r\n    }\r\n\r\n    // This returnes an object with Pages and Posts data together\r\n    // The Alt Store will listen for this method to fire and will store the returned data\r\n    getSuccess(payload){\r\n        return payload;\r\n    }\r\n}\r\n\r\nexport default alt.createActions(DataActions);\r\n"]},"metadata":{},"sourceType":"module"}